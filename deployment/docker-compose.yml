# RealtyScanner Agent - Production Docker Compose
# Epic 5.1: Complete production deployment stack

version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: realtyscanner-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-realtyscanner}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    networks:
      - realtyscanner-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7.2-alpine
    container_name: realtyscanner-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - realtyscanner-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application (Web Dashboard + API)
  web-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: realtyscanner-web
    restart: unless-stopped
    environment:
      # Database
      MONGODB_URL: mongodb://admin:password@mongodb:27017/realtyscanner?authSource=admin
      REDIS_URL: redis://redis:6379
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this}
      
      # External APIs
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      
      # Application
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    ports:
      - "8000:8000"
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    networks:
      - realtyscanner-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Telegram Bot Service
  telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: realtyscanner-bot
    restart: unless-stopped
    command: ["python", "src/telegram_bot/run_bot.py", "--mode", "webhook"]
    environment:
      # Database
      MONGODB_URL: mongodb://admin:password@mongodb:27017/realtyscanner?authSource=admin
      REDIS_URL: redis://redis:6379
      
      # Bot Configuration
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      WEBHOOK_URL: ${WEBHOOK_URL:-https://your-domain.com}
      
      # Application
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    ports:
      - "8001:8001"
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    networks:
      - realtyscanner-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      web-app:
        condition: service_healthy

  # Background Worker (Scrapers & Notifications)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: realtyscanner-worker
    restart: unless-stopped
    command: ["python", "scripts/run_worker.py"]
    environment:
      # Database
      MONGODB_URL: mongodb://admin:password@mongodb:27017/realtyscanner?authSource=admin
      REDIS_URL: redis://redis:6379
      
      # External APIs
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      
      # Worker Configuration
      SCAN_INTERVAL: ${SCAN_INTERVAL:-300}  # 5 minutes
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    networks:
      - realtyscanner-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: realtyscanner-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - realtyscanner-network
    depends_on:
      - web-app
      - telegram-bot
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: realtyscanner-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - realtyscanner-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: realtyscanner-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - realtyscanner-network
    depends_on:
      - prometheus

# Volumes for persistent data
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  realtyscanner-network:
    driver: bridge
